package Assignment9_4;

public class NodeQueue {
	/* stores the element at the front of the queue, if it exists */
	private Node head;
	
	/* stores the element at the end of the queue, if it exists */
	private Node tail;
	
	/**
	 * Inserts a new node containing s at end of queue
	 */
	public void enqueue(String s) {
		//implement

		Node temp = new Node();
		temp.data = s;

		// If queue is empty, then new node is both head and tail
		if (tail == null) {
			head = tail = temp;
			return;
		}

		// Add the new node at the end of queue and change tail
		tail.next = temp;
		tail = temp;
	}	
	/**
	 * Removes node from the front of the queue and returns its value if
	 * head is n
	 */
	public String dequeue() throws QueueException {
		if(isEmpty()) throw new QueueException("Queue is empty!");
		// return null;

		// If queue is empty, return NULL.
		if (head == null)
			return null;

		// Store previous front and move front one node ahead
		Node temp = head;
		head = head.next;

		// If front becomes NULL, then change rear also as NULL
		if (head == null)
			tail = null;
		
		return temp.data;
	}	
	/**
	 * Returns value stored at the front of the queue
	 * @return
	 * @throws QueueException
	 */
	public String peek() throws QueueException {
		if(isEmpty()) throw new QueueException("Queue is empty!");
		return head.data;
	}
	public boolean isEmpty() {
		return head == null;
	}
	@Override
	public String toString() {
		if(isEmpty()) return "<empty queue>";
		return head.toString();
	}
}


