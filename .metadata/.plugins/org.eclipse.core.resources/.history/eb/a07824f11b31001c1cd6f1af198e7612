package data_structures.linkedlistwithouthead;

public class SinglyLinkedList {
	private Node startNode;
	public int size;
	
	
	public SinglyLinkedList() {
		super();
		
		startNode = null;
		size=0;
	}
	
	public void addFirst(String input) {
		
		Node n = new Node(input);
		
		if(startNode==null)
			startNode=n;
		else {
			n.next = startNode;
			startNode = n;
		}

		size++;

	}

	public void addLast(String input) {

		if (startNode == null)
			addFirst(input);
		else {
			Node n = new Node(input);
			Node temp = startNode;

			while (temp.next != null) {

				temp = temp.next;
			}
			temp.next = n;
			size++;
		}



	}

	public void insert(String input, int pos) {
		if (pos > size || pos < 0)
			return;

		Node n = new Node(input);
		int i = 0;
		Node temp = startNode;
		while (temp.next != null) {
			if (i == pos - 1) {

				n.next = temp.next;
				temp.next = n;
			}
			temp = temp.next;
			i++;
		}
		size++;
	}
	public void remove() {

		if (size == 0)
			return;
		startNode = startNode.next;
		size--;
	}

	public boolean contains(String input) {

		if (size == 0)
			return false;

		Node temp = startNode;
		while (temp != null) {
			if (temp.data == input)
				return true;
			temp = temp.next;
		}
		return false;
	}

	@Override
	public String toString() {

		String output = "";
		Node temp = startNode;

		int count = 0;
		while (count < size) {

			output += temp.data + "\n";

			temp = temp.next;
			count++;
		}
		return output;

	}
	
	
	

}
