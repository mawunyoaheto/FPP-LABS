package data_structures.stackandquewithdoublylinklist;

public class StringDoublyLinkList {
	private Node header;
	private Node tail;
	private int size;

	public StringDoublyLinkList() {

		header = new Node();
		tail = new Node();
		header.next = tail;
		tail.previous = header;
		size = 0;
	}

	public void addFirst(String data) throws NullInputException {

		if (data == null)
			throw new NullInputException("Null input not allowed");

		Node n = new Node(data);
		n.next = header.next;
		n.next.previous.next = n;
		n.next.previous = n;
		n.previous = header;
		size++;

	}

	public void addLast(String data) throws NullInputException {
		if (data == null)
			throw new NullInputException("Null input not allowed");

		Node n = new Node(data);
		n.next = tail;
		tail.previous.next = n;
		n.previous = n.next.previous;
		tail.previous = n;

		size++;
	}

	public void insert(String data, int pos) throws NullInputException, IndexOutOfBoundException {

		if (data == null)
			throw new NullInputException("Null input not allowed");
		if (pos < 0 || pos > size)
			throw new IndexOutOfBoundException("Cannot insert at a non-existent index");

		Node n = new Node(data);
		Node temp = header.next;

		int i = 0;

		while (temp != tail) {
			if (i == pos) {
				n.next = temp;
				temp.previous.next = n;
				n.previous = temp.next.previous;
				n.next.previous = n;
				size++;
			}

			temp = temp.next;
			i++;
		}

	}

	public void remove(int pos) throws IndexOutOfBoundException {

		if (pos < 0 || pos > size)
			throw new IndexOutOfBoundException("Cannot remove from a non-existent index");

		int i = 0;
		Node temp = header.next;

		Node prev = temp.previous;
		Node next = temp;

		while (temp != tail) {

			if (i == pos) {

				prev.next = next;
				next.previous = prev;

//				temp.next.previous = temp.previous;
//				temp.previous.next = temp.next;
				size--;

			}

			temp = temp.next;
			prev = next;
			next = temp.next;

			i++;
		}

	}
	@Override
	public String toString() {

		Node temp = header.next;

		String output = "";
		while (temp != tail) {
			output += temp.data + "\n";
			temp = temp.next;
		}
		return output;
	}

}
