package Assignment7_3;

import java.util.LinkedList;

/**
 * Recursively merges two sorted linked lists
 *
 */
public class Merge {

	LinkedList<Integer> list3 = new LinkedList<>();

	public LinkedList<Integer> merge(LinkedList<Integer> list1, LinkedList<Integer> list2) {

		// implement
		int first1;
		int first2;

		if (list1.isEmpty() || list2.isEmpty())
			return list3;

		else {
			// LinkedList<Integer> list3 = new LinkedList<>();
			first1 = list1.getFirst();
			first2 = list2.getFirst();

			if ((first1 < first2)) {

				list1.removeFirst();
				list3.addLast(first1);

			} else if (first2 < first1) {
				list2.removeFirst();
				list3.addLast(first2);
			}

			if (list1.isEmpty()) {
				list3.addAll(list2);
				list2.removeAll(list2);
			}

			if (list2.isEmpty()) {
				list3.addAll(list1);
				list1.removeAll(list1);
			}
			merge(list1, list2);

		}

		return list3;
	}

	
	

	// test your code
	public static void main(String[] args) {
		LinkedList<Integer> list1 = new LinkedList<>();
		LinkedList<Integer> list2 = new LinkedList<>();
		list1.add(2);
		list1.add(5);
		list1.add(8);
		list1.add(11);
		list2.add(1);
		list2.add(3);
		list2.add(6);
		Merge m = new Merge();
		LinkedList<Integer> list3 = m.merge(list1, list2);
		if (list3 != null)
			System.out.println(list3);

	}
}
