package assignment4_3.employeeinfo;

import java.time.LocalDate;
import java.util.Calendar;
import java.util.GregorianCalendar;


public class Employee {

	private AccountList accounts;
	private String name;
	private LocalDate hireDate;

	public Employee(String name, int yearOfHire, int monthOfHire, int dayOfHire) {
		this.name = name;

		GregorianCalendar cal = new GregorianCalendar(yearOfHire, monthOfHire - 1, dayOfHire);
		hireDate = LocalDate.of(cal.get(Calendar.YEAR), 1 + cal.get(Calendar.MONTH), cal.get(Calendar.DATE));

		accounts = new AccountList();
	}



	public void createNewChecking(double startBalance) {

		// AccountList accounts = new AccountList();
		Account checkingAcct = new CheckingAccount(this, startBalance);
		// accounts is the name of the AccountList variable
		accounts.add(checkingAcct);
	}

	public void createNewSavings(double startBalance) {

		Account acct = new SavingsAccount(this, startBalance);
		// accounts is the name of the AccountList variable
		accounts.add(acct);

	}

	public void createNewRetirement(double startBalance) {

		Account acct = new CheckingAccount(this, startBalance);
		// accounts is the name of the AccountList variable
		accounts.add(acct);

	}

	public String getFormattedAcctInfo() {
		// implement

		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < accounts.size(); i++) {

			Account al = accounts.get(i);
			sb.append("Account Type: " + al.getAcctType() + "\n" + "Current Balance: " + al.getBalance() + "\n");

		}

		return sb.toString();
	}

	public void deposit(int acctIndex, double amt) {
		// implement

		switch (acctIndex) {

		case 0: {

			Account selected = accounts.get(acctIndex);
			// Account selected = acct.getAcctType();
			selected.makeDeposit(amt);

			break;
		}
		case 1: {

			Account selected = accounts.get(acctIndex);
			selected.makeDeposit(amt);

			break;
		}
		case 2: {

			Account selected = accounts.get(acctIndex);
			selected.makeDeposit(amt);

			break;
		}
		default:
			throw new IllegalArgumentException("Unexpected value: " + acctIndex);
		}

	}

	public boolean withdraw(int acctIndex, double amt) {
		// switch (acctType) {

		switch (acctIndex) {

		case 0: {

			Account selected = accounts.get(acctIndex);
			selected.makeWithdrawal(amt);

			return true;

		}
		case 1: {

			Account selected = accounts.get(acctIndex);
			selected.makeWithdrawal(amt);
			return true;
		}

		case 2: {

			Account selected = accounts.get(acctIndex);
			selected.makeWithdrawal(amt);
			return true;
		}
		default:
			throw new IllegalArgumentException("Unexpected value: " + acctIndex);
		}


	}

	public MyStringList getNamesOfAccounts() {
		MyStringList names = new MyStringList();
		for (int i = 0; i < accounts.size(); ++i) {
			names.add(accounts.get(i).getAcctType().toString().toLowerCase());
		}
		return names;

	}

	public String getName() {
		return name;
	}

	public LocalDate getHireDate() {

		return hireDate;
	}

}
