package assignment3_2.employeeinfo;

import java.time.LocalDate;
import java.util.Calendar;
import java.util.GregorianCalendar;

public class Employee {

	private Account savingsAcct;
	private Account checkingAcct;
	private Account retirementAcct;
	private String name;
	private LocalDate hireDate;

	public Employee(String name, int yearOfHire, int monthOfHire, int dayOfHire) {
		this.name = name;
		/*
		 * update, using LocalDate GregorianCalendar cal = new
		 * GregorianCalendar(yearOfHire,monthOfHire-1,dayOfHire); hireDate =
		 * cal.getTime();
		 */
		// GregorianCalendar cal = new GregorianCalendar(yearOfHire, monthOfHire - 1,
		// dayOfHire);

		GregorianCalendar cal = new GregorianCalendar(yearOfHire, monthOfHire - 1, dayOfHire);
		hireDate = LocalDate.of(cal.get(Calendar.YEAR), 1 + cal.get(Calendar.MONTH), cal.get(Calendar.DATE));
	}

	public void createNewChecking(double startAmount) {
		// implement

		checkingAcct = new Account(Employee.this, AccountType.CHECKING, startAmount);
	}

	public void createNewSavings(double startAmount) {
		// implement

		// savingsAcct.makeDeposit(startAmount);

		savingsAcct = new Account(Employee.this, AccountType.SAVING, startAmount);

	}

	public void createNewRetirement(double startAmount) {
		// implement

		// retirementAcct.makeDeposit(startAmount);

		retirementAcct = new Account(Employee.this, AccountType.RETIREMENT, startAmount);

	}

	public String getFormattedAcctInfo() {
		// implement

		String validFormattedAccts = "";

		if (checkingAcct != null) {
			validFormattedAccts += checkingAcct.toString();
		}

		if (savingsAcct != null) {
			validFormattedAccts += savingsAcct.toString();
		}

		if (retirementAcct != null) {
			validFormattedAccts += retirementAcct.toString();
		}

		return validFormattedAccts;

	}

	public void deposit(AccountType acctType, double amt) {
		// implement

		switch (acctType) {
		case SAVING: {

			savingsAcct.makeDeposit(amt);
		}
		case CHECKING: {

			checkingAcct.makeDeposit(amt);
		}
		case RETIREMENT: {

			retirementAcct.makeDeposit(amt);
		}
		default:
			throw new IllegalArgumentException("Unexpected value: " + acctType);
		}

	}

	public boolean withdraw(AccountType acctType, double amt) {
		// switch (acctType) {

		switch (acctType) {
		case SAVING: {

			savingsAcct.makeWithdrawal(amt);
		}
		case CHECKING: {

			checkingAcct.makeWithdrawal(amt);
		}
		case RETIREMENT: {

			retirementAcct.makeWithdrawal(amt);
		}
		default:
			throw new IllegalArgumentException("Unexpected value: " + acctType);
		}

	}

	public String getName() {
		return name;
	}

	public LocalDate getHireDate() {

		return hireDate;
	}

}
